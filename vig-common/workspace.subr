git_last_commit() {
	treeish=$1
	git log -1 --format=short --pretty=oneline $treeish | awk '{print $1}'
}

# The vig update method.
update_workspace() {
	# Update the copy of vig, if needed.
	cd ${VIG_REPO}
	commitid=$(git_last_commit master)
	idfile=${VIG_COPY}/.commitid
	[ -f "${idfile}" ] && currentid=$(cat ${idfile})
	[ "${currentid}" = "${commitid}" ] && return 1

	rm -rf ${VIG_COPY}
	mkdir -p ${VIG_COPY}
	runcmd "git archive ${commitid} | tar -C ${VIG_COPY} -xf -"
	echo "${commitid}" > ${idfile}
	return 0
}

# This function is intended to be rerun anytime a build is needed.
host_workspace_setup() {
	# Fetch the closed binaries, if needed.  Cache them in case we need
	# multiple working spaces.
	closed_bins=${VIG_TOP}/.closed_bins
	closed_url=http://dlc.openindiana.org/dlc.sun.com/osol/on/downloads/20100817

	curdir=$(pwd)
	cd ${VIG_REPO}
	mkdir -p ${closed_bins}
	for f in on-closed-bins-nd on-closed-bins; do
		p=${f}.i386.tar.bz2
		cached_p=${closed_bins}/${p}
		case "$f" in
		on-closed-bins-nd) expected="35f08b4630d85307940482a8470f1188" ;;
		on-closed-bins)    expected="e6bdf40bd30d330e6a68f0515f6f2d24" ;;
		*)		   echo "???" && exit 1 ;;
		esac
		if [ -f ".${p}.cksum" ]; then
			cksum=$(cat .${p}.cksum)
			[ "$cksum" = "$expected" ] && continue
		fi

		if [ ! -f "${cached_p}" ]; then
			echo "Fetching build prereq ${p} ..."
			runcmd wget -qO ${cached_p} ${closed_url}/${p}
		fi
		echo "Checking MD5 for ${cached_p} ..."
		md5=$(md5_file ${cached_p})
		if [ "$md5" != "$expected" ]; then
			echo "MD5 checksum failure for ${f}"
			exit 1
		fi
		echo "MD5 OK, extracting ${cached_p} ..."
		tar xf ${cached_p}
		echo "$expected" > .${p}.cksum
	done
	if [ ! -e illumos.sh -o ${VIG_COMMON}/illumos.sh -nt illumos.sh ]; then
		sed -e "s,WS_GATE_NAME,$(basename $(pwd)),g" \
			${VIG_COMMON}/illumos.sh > illumos.sh
	fi
	cd $curdir
}
register_command host workspace_setup "Perform any needed workspace setup"
